import json
import os
import psycopg2
from psycopg2.extras import RealDictCursor
from typing import Dict, Any
import random

ENERGY_COST = 20

def generate_site_html(prompt: str) -> str:
    '''Generate HTML site based on prompt using templates'''
    
    prompt_lower = prompt.lower()
    
    colors = [
        ('blue', 'purple', '#3B82F6', '#9333EA'),
        ('green', 'teal', '#10B981', '#14B8A6'),
        ('pink', 'rose', '#EC4899', '#F43F5E'),
        ('orange', 'amber', '#F97316', '#F59E0B'),
        ('indigo', 'violet', '#6366F1', '#8B5CF6')
    ]
    
    color1, color2, hex1, hex2 = random.choice(colors)
    
    sections = []
    
    if any(word in prompt_lower for word in ['–∫–æ—Ñ–µ', '–∫–∞—Ñ–µ', '—Ä–µ—Å—Ç–æ—Ä–∞–Ω', '–∫–æ—Ñ–µ–π–Ω—è', '–µ–¥–∞']):
        sections.append(f'''
        <section class="py-20 bg-gradient-to-r from-{color1}-50 to-{color2}-50">
            <div class="container mx-auto px-4">
                <h2 class="text-4xl font-bold text-center mb-12">–ù–∞—à–µ –º–µ–Ω—é</h2>
                <div class="grid md:grid-cols-3 gap-8">
                    <div class="bg-white p-6 rounded-xl shadow-lg hover:shadow-2xl transition-shadow">
                        <h3 class="text-2xl font-bold mb-4">–≠—Å–ø—Ä–µ—Å—Å–æ</h3>
                        <p class="text-gray-600 mb-4">–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∫—Ä–µ–ø–∫–∏–π –∫–æ—Ñ–µ</p>
                        <p class="text-3xl font-bold text-{color1}-600">150‚ÇΩ</p>
                    </div>
                    <div class="bg-white p-6 rounded-xl shadow-lg hover:shadow-2xl transition-shadow">
                        <h3 class="text-2xl font-bold mb-4">–ö–∞–ø—É—á–∏–Ω–æ</h3>
                        <p class="text-gray-600 mb-4">–° –Ω–µ–∂–Ω–æ–π –º–æ–ª–æ—á–Ω–æ–π –ø–µ–Ω–∫–æ–π</p>
                        <p class="text-3xl font-bold text-{color1}-600">200‚ÇΩ</p>
                    </div>
                    <div class="bg-white p-6 rounded-xl shadow-lg hover:shadow-2xl transition-shadow">
                        <h3 class="text-2xl font-bold mb-4">–õ–∞—Ç—Ç–µ</h3>
                        <p class="text-gray-600 mb-4">–ú—è–≥–∫–∏–π –∫–æ—Ñ–µ —Å –º–æ–ª–æ–∫–æ–º</p>
                        <p class="text-3xl font-bold text-{color1}-600">220‚ÇΩ</p>
                    </div>
                </div>
            </div>
        </section>
        ''')
    
    if any(word in prompt_lower for word in ['—Ñ–æ—Ä–º–∞', '–∑–∞–∫–∞–∑', '–∫–æ–Ω—Ç–∞–∫—Ç', '—Å–≤—è–∑']):
        sections.append(f'''
        <section class="py-20 bg-white">
            <div class="container mx-auto px-4 max-w-2xl">
                <h2 class="text-4xl font-bold text-center mb-12">–û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É</h2>
                <form class="space-y-6">
                    <div>
                        <label class="block text-sm font-medium mb-2">–ò–º—è</label>
                        <input type="text" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-{color1}-500 focus:border-transparent" placeholder="–í–∞—à–µ –∏–º—è">
                    </div>
                    <div>
                        <label class="block text-sm font-medium mb-2">Email</label>
                        <input type="email" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-{color1}-500 focus:border-transparent" placeholder="your@email.com">
                    </div>
                    <div>
                        <label class="block text-sm font-medium mb-2">–°–æ–æ–±—â–µ–Ω–∏–µ</label>
                        <textarea class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-{color1}-500 focus:border-transparent" rows="4" placeholder="–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"></textarea>
                    </div>
                    <button type="submit" class="w-full bg-gradient-to-r from-{color1}-600 to-{color2}-600 text-white font-bold py-3 px-6 rounded-lg hover:shadow-xl transition-shadow">
                        –û—Ç–ø—Ä–∞–≤–∏—Ç—å
                    </button>
                </form>
            </div>
        </section>
        ''')
    
    if any(word in prompt_lower for word in ['–ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ', '—Ä–∞–±–æ—Ç', '–ø—Ä–æ–µ–∫—Ç', '–≥–∞–ª–µ—Ä–µ—è']):
        sections.append(f'''
        <section class="py-20 bg-gray-50">
            <div class="container mx-auto px-4">
                <h2 class="text-4xl font-bold text-center mb-12">–ù–∞—à–∏ —Ä–∞–±–æ—Ç—ã</h2>
                <div class="grid md:grid-cols-3 gap-8">
                    <div class="bg-white rounded-xl overflow-hidden shadow-lg hover:shadow-2xl transition-shadow">
                        <div class="h-48 bg-gradient-to-br from-{color1}-400 to-{color2}-400"></div>
                        <div class="p-6">
                            <h3 class="text-xl font-bold mb-2">–ü—Ä–æ–µ–∫—Ç 1</h3>
                            <p class="text-gray-600">–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞</p>
                        </div>
                    </div>
                    <div class="bg-white rounded-xl overflow-hidden shadow-lg hover:shadow-2xl transition-shadow">
                        <div class="h-48 bg-gradient-to-br from-{color2}-400 to-{color1}-400"></div>
                        <div class="p-6">
                            <h3 class="text-xl font-bold mb-2">–ü—Ä–æ–µ–∫—Ç 2</h3>
                            <p class="text-gray-600">–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞</p>
                        </div>
                    </div>
                    <div class="bg-white rounded-xl overflow-hidden shadow-lg hover:shadow-2xl transition-shadow">
                        <div class="h-48 bg-gradient-to-br from-{color1}-400 to-{color2}-400"></div>
                        <div class="p-6">
                            <h3 class="text-xl font-bold mb-2">–ü—Ä–æ–µ–∫—Ç 3</h3>
                            <p class="text-gray-600">–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞</p>
                        </div>
                    </div>
                </div>
            </div>
        </section>
        ''')
    
    if not sections:
        sections.append(f'''
        <section class="py-20 bg-white">
            <div class="container mx-auto px-4 text-center">
                <h2 class="text-4xl font-bold mb-6">–û –Ω–∞—Å</h2>
                <p class="text-xl text-gray-600 max-w-3xl mx-auto mb-12">
                    {prompt}
                </p>
                <div class="grid md:grid-cols-3 gap-8 mt-12">
                    <div class="p-6">
                        <div class="text-5xl mb-4">‚ö°</div>
                        <h3 class="text-xl font-bold mb-2">–ë—ã—Å—Ç—Ä–æ</h3>
                        <p class="text-gray-600">–ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞</p>
                    </div>
                    <div class="p-6">
                        <div class="text-5xl mb-4">üé®</div>
                        <h3 class="text-xl font-bold mb-2">–ö—Ä–∞—Å–∏–≤–æ</h3>
                        <p class="text-gray-600">–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω</p>
                    </div>
                    <div class="p-6">
                        <div class="text-5xl mb-4">üöÄ</div>
                        <h3 class="text-xl font-bold mb-2">–ù–∞–¥—ë–∂–Ω–æ</h3>
                        <p class="text-gray-600">–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è</p>
                    </div>
                </div>
            </div>
        </section>
        ''')
    
    title = prompt.split()[0].capitalize() if prompt else "–ú–æ–π —Å–∞–π—Ç"
    
    html = f'''<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{title}</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap');
        body {{ font-family: 'Inter', sans-serif; }}
    </style>
</head>
<body class="antialiased">
    <header class="bg-gradient-to-r from-{color1}-600 to-{color2}-600 text-white py-20">
        <div class="container mx-auto px-4 text-center">
            <h1 class="text-5xl md:text-6xl font-bold mb-6">{prompt}</h1>
            <p class="text-xl md:text-2xl opacity-90 mb-8">–°–æ–∑–¥–∞–Ω–æ –Ω–∞ POEHALI.DEV</p>
            <button class="bg-white text-{color1}-600 font-bold py-3 px-8 rounded-lg hover:shadow-2xl transition-shadow text-lg">
                –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
            </button>
        </div>
    </header>

    {''.join(sections)}

    <footer class="bg-gray-900 text-white py-12">
        <div class="container mx-auto px-4 text-center">
            <p class="text-lg">&copy; 2024 {title}. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.</p>
            <p class="text-gray-400 mt-2">–°–¥–µ–ª–∞–Ω–æ —Å ‚ù§Ô∏è –Ω–∞ POEHALI.DEV</p>
        </div>
    </footer>
</body>
</html>'''
    
    return html


def handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    '''
    Business: Generate website using templates based on user prompt
    Args: event - dict with httpMethod, body (user_id, prompt)
    Returns: HTTP response with generated HTML code
    '''
    method: str = event.get('httpMethod', 'POST')
    
    if method == 'OPTIONS':
        return {
            'statusCode': 200,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type, X-User-Id',
                'Access-Control-Max-Age': '86400'
            },
            'body': ''
        }
    
    if method != 'POST':
        return {
            'statusCode': 405,
            'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
            'body': json.dumps({'error': 'Method not allowed'})
        }
    
    body_data = json.loads(event.get('body', '{}'))
    user_id = body_data.get('user_id')
    prompt = body_data.get('prompt', '').strip()
    
    if not user_id or not prompt:
        return {
            'statusCode': 400,
            'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
            'body': json.dumps({'error': 'user_id and prompt required'})
        }
    
    dsn = os.environ.get('DATABASE_URL')
    conn = psycopg2.connect(dsn)
    cur = conn.cursor(cursor_factory=RealDictCursor)
    
    try:
        cur.execute("SELECT energy_balance FROM users WHERE id = %s", (user_id,))
        user = cur.fetchone()
        
        if not user:
            return {
                'statusCode': 404,
                'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
                'body': json.dumps({'error': 'User not found'})
            }
        
        if user['energy_balance'] < ENERGY_COST:
            return {
                'statusCode': 403,
                'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
                'body': json.dumps({
                    'error': 'Not enough energy',
                    'required': ENERGY_COST,
                    'current': user['energy_balance']
                })
            }
        
        generated_html = generate_site_html(prompt)
        
        new_balance = user['energy_balance'] - ENERGY_COST
        cur.execute(
            "UPDATE users SET energy_balance = %s WHERE id = %s",
            (new_balance, user_id)
        )
        conn.commit()
        
        return {
            'statusCode': 200,
            'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
            'body': json.dumps({
                'success': True,
                'html': generated_html,
                'energy_used': ENERGY_COST,
                'energy_remaining': new_balance
            })
        }
    
    finally:
        cur.close()
        conn.close()
